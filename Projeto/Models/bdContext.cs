// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;

namespace Noitcua.Models;

public partial class bdContext : DbContext
{
    public bdContext()
    {
    }

    public bdContext(DbContextOptions<bdContext> options)
        : base(options)
    {
    }

    public virtual DbSet<admin> admin { get; set; }

    public virtual DbSet<chat> chat { get; set; }

    public virtual DbSet<comprador> comprador { get; set; }

    public virtual DbSet<denuncia> denuncia { get; set; }

    public virtual DbSet<sala> sala { get; set; }

    public virtual DbSet<utilizador> utilizador { get; set; }

    public virtual DbSet<venda> venda { get; set; }

    public virtual DbSet<vendedor> vendedor { get; set; }

    public virtual DbSet<vendedor_has_sala> vendedor_has_sala { get; set; }

    protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
#warning To protect potentially sensitive information in your connection string, you should move it out of source code. You can avoid scaffolding the connection string by using the Name= syntax to read it from configuration - see https://go.microsoft.com/fwlink/?linkid=2131148. For more guidance on storing connection strings, see https://go.microsoft.com/fwlink/?LinkId=723263.
        => optionsBuilder.UseSqlServer("Data Source=DESKTOP-2UF8C2U;Initial Catalog=li4;Integrated Security=True;Encrypt=False");

    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        modelBuilder.Entity<admin>(entity =>
        {
            entity.HasOne(d => d.id_userNavigation).WithMany(p => p.admin)
                .HasForeignKey(d => d.id_user)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_admin_utilizador");
        });

        modelBuilder.Entity<chat>(entity =>
        {
            entity.Property(e => e.data).HasColumnType("datetime");
            entity.Property(e => e.mensagem)
                .IsRequired()
                .HasMaxLength(100);

            entity.HasOne(d => d.id_salaNavigation).WithMany(p => p.chat)
                .HasForeignKey(d => d.id_sala)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_chat_sala");

            entity.HasOne(d => d.id_utilizadorNavigation).WithMany(p => p.chat)
                .HasForeignKey(d => d.id_utilizador)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_chat_utilizador");
        });

        modelBuilder.Entity<comprador>(entity =>
        {
            entity.HasOne(d => d.id_userNavigation).WithMany(p => p.comprador)
                .HasForeignKey(d => d.id_user)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_comprador_utilizador");
        });

        modelBuilder.Entity<denuncia>(entity =>
        {
            entity.Property(e => e.motivo)
                .IsRequired()
                .HasMaxLength(50);

            entity.HasOne(d => d.id_denunciadoNavigation).WithMany(p => p.denunciaid_denunciadoNavigation)
                .HasForeignKey(d => d.id_denunciado)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_denunciado_utilizador");

            entity.HasOne(d => d.id_denunciadorNavigation).WithMany(p => p.denunciaid_denunciadorNavigation)
                .HasForeignKey(d => d.id_denunciador)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_denunciador_utilizador");
        });

        modelBuilder.Entity<sala>(entity =>
        {
            entity.Property(e => e.descricao).HasMaxLength(200);
            entity.Property(e => e.titulo)
                .IsRequired()
                .HasMaxLength(50);

            entity.HasOne(d => d.id_compradorNavigation).WithMany(p => p.sala)
                .HasForeignKey(d => d.id_comprador)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_sala_comprador");
        });

        modelBuilder.Entity<utilizador>(entity =>
        {
            entity.Property(e => e.email)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.handle)
                .IsRequired()
                .HasMaxLength(20);
            entity.Property(e => e.nationality)
                .IsRequired()
                .HasMaxLength(3)
                .IsFixedLength();
            entity.Property(e => e.password)
                .IsRequired()
                .HasMaxLength(50);
        });

        modelBuilder.Entity<venda>(entity =>
        {
            entity.Property(e => e.date).HasColumnType("datetime");
            entity.Property(e => e.payment_method)
                .IsRequired()
                .HasMaxLength(20);

            entity.HasOne(d => d.id_salaNavigation).WithMany(p => p.venda)
                .HasForeignKey(d => d.id_sala)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_venda_sala");
        });

        modelBuilder.Entity<vendedor>(entity =>
        {
            entity.HasOne(d => d.id_userNavigation).WithMany(p => p.vendedor)
                .HasForeignKey(d => d.id_user)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_vendedor_utilizador");
        });

        modelBuilder.Entity<vendedor_has_sala>(entity =>
        {
            entity.HasNoKey();

            entity.HasOne(d => d.id_salaNavigation).WithMany()
                .HasForeignKey(d => d.id_sala)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_vendedor_has_sala_sala");

            entity.HasOne(d => d.id_vendedorNavigation).WithMany()
                .HasForeignKey(d => d.id_vendedor)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_vendedor_has_sala_vendedor");
        });

        OnModelCreatingPartial(modelBuilder);
    }

    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
}